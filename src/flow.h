/*-----------------------------------------------
-- EMMREM: flow.h
--
-- Simulation flow field functions and tools.
--
-- ______________CHANGE HISTORY______________
--
-- 20070418 RKS: Commenting out simulation parameters, see Makefile.
-- ______________END CHANGE HISTORY______________
------------------------------------------------*/

/* The Earth-Moon-Mars Radiation Environment Module (EMMREM) software is */
/* free software; you can redistribute and/or modify the EMMREM sotware */
/* or any part of the EMMREM software under the terms of the GNU General */
/* Public License (GPL) as published by the Free Software Foundation; */
/* either version 2 of the License, or (at your option) any later */
/* version. Software that uses any portion of the EMMREM software must */
/* also be released under the GNU GPL license (version 2 of the GNU GPL */
/* license or a later version). A copy of this GNU General Public License */
/* may be obtained by writing to the Free Software Foundation, Inc., 59 */
/* Temple Place, Suite 330, Boston MA 02111-1307 USA or by viewing the */
/* license online at http://www.gnu.org/copyleft/gpl.html. */

#ifndef FLOW_H
#define FLOW_H

#ifdef __cplusplus
extern "C" {
#endif

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    void                                                      /*---*/
/*--*/    mhdCoupleCheck(void);                                     /*---*/
/*--*                                                                *---*/
/*--* Check to see if it is time to couple to external MHD           *---*/
/*--*                                                                *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    void                                                      /*---*/
/*--*/    updateMhd();                                              /*---*/
/*--*                                                                *---*/
/*--* Calculate the Mhd quantities and put them in the data          *---*/
/*--* structure                                                      *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*------------------------------------------------------------------*/
/*------------------------------------------------------------------*/
/*--*/    void                                                  /*--*/
/*--*/    updateCellVolume( Index_t face,                       /*--*/
/*--*/                      Index_t row,                        /*--*/
/*--*/                      Index_t col,                        /*--*/
/*--*/                      Index_t shell,                      /*--*/
/*--*/                      Scalar_t dt,                        /*--*/
/*--*/                      Index_t idealShockNode);            /*--*/
/*--                                                              --*/
/*-- Updates local density at gride node                          --*/
/*-- Calculates a divV from (1/n)dn/dt                            --*/
/*-- Modifies local distribution dictated by cell volume change   --*/
/*------------------------------------------------------------------*/
/*------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    Vec_t                                                     /*---*/
/*--*/    delrFlow( Vec_t position,                                 /*---*/
/*---*/             Scalar_t rmag,                                  /*---*/
/*---*/             Node_t node,                                    /*---*/
/*---*/             Scalar_t dt);                                   /*---*/
/*--*                                                                *---*/
/*--* Flow field pushing nodes around.                               *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    Scalar_t                                                  /*---*/
/*--*/    divV( Scalar_t rmag,                                      /*---*/
/*--*/          Index_t idealShockNode );                           /*---*/
/*--*                                                                *---*/
/*--* Returns Divergence of the Flow field.                          *---*/
/*--* We return a number in units of 1/TAU where TAU is              *---*/
/*--* is the light crossing time of 1 AU. Currently, position is     *---*/
/*--* not used. THIS FUNCTION IS NOT IN USE PRESENTLY.               *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    Scalar_t                                                  /*---*/
/*--*/    mhdDensity(Scalar_t rmag,                                 /*---*/
/*--*/               Index_t idealShockNode);                       /*---*/
/*--*                                                                *---*/
/*--* Calculate the local density.                                   *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    void                                                      /*---*/
/*--*/    mhdB( Vec_t position, Scalar_t rmag,                      /*---*/
/*--*/	        Scalar_t *Br,   Scalar_t *Btheta,                   /*---*/
/*--*/          Scalar_t *Bphi, Scalar_t *Bmag,                     /*---*/
/*--*/ 	        Vec_t *Bvec,    Scalar_t Vr,                        /*---*/
/*--*/          Index_t idealShockNode);                            /*---*/
/*--*                                                                *---*/
/*--* Calculate the local vec(B).                                    *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    void                                                      /*---*/
/*--*/    mhdV( Vec_t position, Scalar_t  rmag,                     /*---*/
/*--*/	        Scalar_t *Vr,   Scalar_t *Vtheta,                   /*---*/
/*--*/	        Scalar_t *Vphi, Scalar_t *Vmag,                     /*---*/
/*--*/          Vec_t *Vvec, Index_t idealShockNode);               /*---*/
/*--*                                                                *---*/
/*--* Calculate the local vec(V) independently of position and rmag  *---*/
/*--* (currently).                                                   *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    void                                                      /*---*/
/*--*/    mhdCurlBoverB2( Vec_t r,                                  /*---*/
/*--*/										SphVec_t *curl,														/*---*/
/*--*/										Scalar_t Vr, Index_t idealShockNode);     /*---*/
/*--*                                                                *---*/
/*--*			pull in the curl of B over B2                              *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    SphVec_t                                                  /*---*/
/*--*/    parkerB(	Scalar_t r, Scalar_t theta,											/*---*/
/*--*/							Scalar_t Vr, Index_t idealShockNode);					  /*---*/
/*--*/							                                                /*---*/
/*--*                                                                *---*/
/*--*			return the parker spiral solution for the magnetic field   *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    SphVec_t                                                  /*---*/
/*--*/    curlBoverB2(	Vec_t rCart,              									/*---*/
/*--*/									Scalar_t Vr, Index_t idealShockNode);       /*---*/
/*--*/							                                                /*---*/
/*--*                                                                *---*/
/*--*			return del x B/B^2 using the parkerB() solution            *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/
/*--*/    Scalar_t                                                  /*---*/
/*--*/    idealShockFactor( Scalar_t r );                           /*---*/
/*--*                                                                *---*/
/*--*     Multiplicative factor for ideal shock fields (r in AU)     *---*/
/*--*                                                                *---*/
/*-----------------------------------------------------------------------*/
/*-----------------------------------------------------------------------*/

#ifdef __cplusplus
}
#endif

#endif
